#+TITLE: Fonones y espectroscopía Raman en semiconductores bidimensionales.
#+LaTeX_HEADER:\usepackage[a4paper,left=1cm,right=1cm,top=1cm,bottom=1.5cm]{geometry}
#+LaTeX_HEADER:\usepackage[utf8]{inputenc}
#+LaTeX_HEADER:\usepackage{siunitx}
#+LaTeX_HEADER:\usepackage{amsmath}
#+LaTeX_HEADER:\usepackage{booktabs} %Publication quality tables in LaTeX.

\begin{abstract}
Los materiales bidimensionales (2D) como el grafeno son de gran interés tanto por sus
propiedades físicas exclusivas como por sus aplicaciones potenciales. El estudio de la dinámica de la red cristalina (fonones) de estos materiales es un requisito previo para entender su estabilidad estructural y propiedades térmicas, así como sus propiedades de transporte y ópticas.


Este Trabajo de Fin de Grado consiste en la computación de los modos vibracionales de
materiales semiconductores 2D y su correlación con los observables relevantes para la interpretación
de los experimentos de dispersión de luz.

\end{abstract}

\color{blue}
La redacción del TFG todavía se encuentra en una versión muy preliminar, de echo es más un bloc de notas que lo que espero que sea el TFG final.
\normalcolor

\newpage

* Bibliografía y apuntes de repaso                    :noexport:
** Bibliografia basica
  - [[file:Bibliografia/wirtz2004.pdf][wirtz2004]] 
  - [[file:Bibliografia/Phonons_ Theory and Experiments I_ Lattice Dynamics and Models of Interatomic Forces.pdf][Phonons Theory]]
** Repaso de Estado Sólido 
  - [[file:~/Documents/Fisica/Biblioteca/Estat_Solid/Apunts/FES0910_PortadaxTema_01.pdf][Tema 1 de Estado Sólido]]
  - [[file:~/Documents/Fisica/Biblioteca/Estat_Solid/Apunts/FES0910_Tema02.pdf][Tema2. Vibraciones atómicas en cristales]]


* Pruebas varias (para probar org-mode, el uso de diversos lenguajes, etc.)  :noexport:

** Probando que funciona bien Wolfram Language 

#+begin_src mathematica :results latex :export both
FourierTransform[Cos[x],x,w] // TeXForm
#+end_src

#+RESULTS:
#+begin_export latex
\sqrt{\frac{\pi }{2}} \delta (w-1)+\sqrt{\frac{\pi }{2}} \delta (w+1)
#+end_export

  


* TODO Introduccion
Las vibraciones reticulares están regidas por las fuerzas que experimentan los átomos cuando se desplazan de su posición de equilibrio. La primera hipótesis es que cada átomo tiene una posicion de equilibrio en el cristal, y consideraremos que estos átomos vibran con una amplitud pequeña alrededor de su posición de equilibrio, de manera que el sólido se encuentra en estados que corresponden a lo que macroscópicamente se conoce como /la region de comportamiento elástico lineal/, donde se verifica la ley de Hooke.

Podremos por tanto aproximar la energia potencial de interaccion por el termino armónico de su desarrolo en serie de potencias del desplazamiento, y la fuerza resultante es por tanto una funcion aproximadamente lineal del desplazamiento


* TODO Desarrollo del trabajo
   
** TODO Formular la matriz dinámica para el BN  monolayer
  En el caso del BN monolayer estamos tratando con un cristal bidimensional del base diatómica, cuya celda unidad viene dada por:

\begin{equation}
\vec a_1=a(1,0);\qquad\vec a_2=a\left(-\frac{1}{2},\frac{\sqrt{3}}{2}\right)
\end{equation}


#+begin_src python :session :results output :exports both
  import numpy as np
  from  numpy  import array, sqrt, sort, vdot, pi, arccos
  from numpy.linalg import norm
  import pandas as pd
  import matplotlib
  from matplotlib import pyplot as plt

  a=1 
  a1=np.array([a,0])
  a2=np.array([-a/2,sqrt(3)*a/2])
#+end_src

#+RESULTS:

Podemos comprobar que efectivamente se trata de una celdilla hexagonal, pues los dos vectores base forman un angulo src_python[:session]{'{:.2f}'.format(arccos(vdot(a1,a2)))} {{{results(=2.09=)}}}   $= 2\pi/3$ rad.


Numeraremos las celdillas unidad con un índice vectorial $\vec l=\left( l_1, l_2\right)$.

Las posiciones de los nudos son $\vec R_{\vec l}=l_1\vec{a}_1+l_2\vec{a}_2$.

Visualizamos una región de la red hexagonal, con los correspondientes nudos (que no átomos), así como la correspondiente celda unidad,

\vspace{0.5cm}
#+LATEX:\begin{minipage}{0.6\textwidth}   
#+begin_src python :session :results none :exports both
  def R_l(l1,l2):
   return l1*a1+l2*a2 

  reddenudos=array([R_l(l1,l2) for l1 in range(-3, 4)
    for l2 in range(-3,4)])

  x = reddenudos[:,0]
  y = reddenudos[:,1]
  plt.plot(x,y,"o")
  ax = plt.axes()
  ax.arrow(R_l(0,0)[0],R_l(0,0)[1],R_l(1,0)[0],R_l(1,0)[1])
  ax.arrow(R_l(0,0)[0],R_l(0,0)[1],R_l(0,1)[0],R_l(0,1)[1])
  plt.savefig("Graficas/Reddenudos.jpg")
  plt.close()
#+end_src

#+LATEX:\end{minipage}\begin{minipage}{0.4\textwidth}
#+ATTR_ORG: :width 480
[[file:Graficas/Reddenudos.jpg]]
#+LATEX:\end{minipage}

\newpage

Para calcular los modos de vibración por primeros principios debemos determinar primero las posiciones atómicas de equilibrio  en la celda unidad **nota: proporcionadas como datos**

Los átomos estan situados en:

\begin{equation}
\begin{aligned}
\vec R_B&=\frac{1}{3}\vec{a_1}+2\vec{a_2}\\
\vec R_N&=\frac{2}{3}\vec{a_1}+\frac{1}{3}\vec{a_2}
\end{aligned}
\end{equation}

#+begin_src python :session :results none :exports none
  R_B=1/3*a1+2/3*a2
  R_N=2/3*a1+1/3*a2
#+end_src



*** Cristales bidimensionales con base diatómica


Las posiciones de equilibrio de los átomos de la base respecto de su nudo son $\vec{R}_\nu^0$ , con $\nu=1,2$, puesto que la base tiene 2 átomos, el $1$ hará referencia a los átomos de $B$ y $2$ a los de átomos de $N$ (notemos que aunque los átomos fuesen idénticos deberíamos especificar a que átomo de la base nos referimos, puesto que no ocupan posiciones equivalentes).


Las posiciones de equilibrio de los átomos: $\vec R_{\nu,\vec l}=\vec{R}_{\vec{l}} + \vec R_\nu^0$  así como los desplazamientos atómicos: $\vec u_{\nu,\vec l}$ quedarán por tanto identificados por medio de dos índices. La fuerza que ejerce el átomo $\nu,\vec l$ sobre el átomo $\nu',\vec 0$ tiene aproximádamente la dirección determinada por las posiciones de equilibrio de estos átomos. Esta dirección es la del vector $\vec R_{\nu',\nu,\vec l}=\vec{R}_{\vec l} +\vec R_{\nu',\nu}^0$ donde $\vec R_{\nu',\nu}^0\equiv\vec R_\nu^0-\vec R_{\nu'}^0$.

#+LATEX:\begin{minipage}{0.55\textwidth}   
#+begin_src python :session :results none :exports both
  #Posiciones de equilibrio de los átomos

  def R_nu_l(nu,l1,l2):
    if nu == 1:
      return l1*a1+l2*a2+R_B

    elif nu == 2:
      return l1*a1+l2*a2+R_N

    else:
      print("Error, nu solo puede ser 1 o 2 ")

  AtomosB=array([R_nu_l(1,l1,l2) for l1 in range(-4, 5)
		 for l2 in range(-4,5)])

  AtomosN=array([R_nu_l(2,l1,l2) for l1 in range(-4, 5)
		 for l2 in range(-4,5)])

  xB = AtomosB[:,0]
  yB = AtomosB[:,1]
  plt.plot(xB,yB,"o",color="red")

  xN = AtomosN[:,0]
  yN = AtomosN[:,1]
  plt.plot(xN,yN,"o",color="blue")

  plt.savefig("Graficas/Reddeatomos.jpg")
  plt.close()
#+end_src

#+RESULTS:

#+LATEX:\end{minipage}\begin{minipage}{0.4\textwidth}   
#+ATTR_ORG: :width 480
[[file:Graficas/Reddeatomos.jpg]]
#+LATEX:\end{minipage}

\vspace{0.5cm}
Las dimensiones del cristal son $L_1=N_1 a_1$ y $L_2=N_2 a_2$, donde $N_i$ ($i=1,2$) es el número de celdillas en la dirección $\hat a_i$. El cristal tiene tiene $N=N_1N_2$ celdillas unidad primitivas y $2N$ átomos.

\newpage

*La idea básica es que si la base tiene $N_\nu$ átomos entonces debemos plantear y resolver las ecuaciones de movimiento de los $N_{\nu}$ átomos de la base de la celdilla $\vec 0$*, por lo tanto en el caso que estamos estudiando debemos resolver 2 ecuaciones vectoriales de movimiento: una para el átomo de $B$ y la otra para el de $N$.

La fuerza que ejerce el átomo $\nu,\vec l$ sobre el átomo $\nu',\vec 0$ se puede expresar de manera aproximada como:

\begin{equation*}
F_{\nu',\vec 0,\nu,\vec l}=\alpha_{\nu',\nu,\vec l}\left(\hat R_{\nu',\nu,\vec l}\otimes\hat R_{\nu',\nu,\vec l}\right)\cdot\left(\vec u_{\nu,\vec l}-\vec u_{\nu',\vec 0}\right)
\end{equation*}

donde $\hat R_{\nu',\nu,\vec l}$ es el vector unitario en la dirección $\vec R_{\nu',\nu,\vec l}$

La ecuación de movimiento del átomo $\nu',\vec 0$ es por lo tanto:

\begin{equation*}
m_{\nu'}\ddot{\vec u}_{\nu',\vec 0}=\sum_{\nu,\vec l}\alpha_{\nu',\nu,\vec l}\left(\hat R_{\nu',\nu,\vec l}\otimes\hat R_{\nu',\nu,\vec l}\right)\cdot\left(\vec u_{\nu,\vec l}-\vec u_{\nu',\vec 0}\right)
\end{equation*}


Buscaremos soluciones de la forma:

\begin{equation*}
\vec u_ {\nu,\vec l}=\vec A_\nu e^{i\left(\vec q\cdot\vec R_{\vec l}-\omega t\right)}
\end{equation*}

donde $\vec A_\nu$ es el /vector de polarización/ que determina la amplitud y dirección de vibración de los átomos de tipo $\nu$ . Notemos que aunque el cristal sea bi-dimensional, los átomos de este pueden vibrar en las 3 direcciones espaciales.

Es importante apreciar que se necesitan tantas amplitudes de vibración como átomos tenga la base porque estos no ocupan posiciones equivalentes y describen vibraciones distintas. Se deben cumplir así $N_\nu=2$ ecuaciones vectoriales del tipo

\begin{equation}\boxed{
-m_{\nu^{\prime}}\omega^2\vec A_{\nu'}=\sum_{\nu,\vec l}\alpha_{\nu',\nu,\vec l}\left(\hat R_{\nu',\nu,\vec l}\otimes\hat R_{\nu',\nu,\vec l}\right)\cdot\left(\vec A_{\nu}e^{i\vec q\cdot\vec R_{\vec l}}-\vec A_{\nu'}\right)}
\label{eq1}
\end{equation}

Como se trata de un sistema de ecuaciones lineales homogéneas, se debe cumplir la correspondiente ecuación secular, es decir, que el determinante de la matriz de dimensión $3N_\nu\otimes 3N_\nu$ ($3\cdot2\otimes 3\cdot2$) de los coeficientes $A_{\nu',i}$ en la ecuación \ref{eq1} sea nula. Esta ecuación tiene $3 N_\nu=6$ soluciones que describen las $6$ ramas de la relación de dispersión, es decir, las $6$ frecuencias características de los $6$ modos normales de vibración de vector de onda $\vec q$. Se cumple que el número total de modos normales de vibración coincide con el triple del número total de átomos, es decir, \textit{el número total de modos normales de vibración coincide con el de grados de libertad de movimiento de los átomos}

Debemos notar que tal y como esta escrita la ecuación \ref{eq1}, sólo estamos considerando vibraciones dentro del plano del cristal (puesto que estamos considerando $\hat R_{\nu',\nu,\vec l}$ como vectores de 2 dimensiones . Como los átomos pueden moverse en la tres dimensiones debemos añadir una tercera componente a la matriz $\hat R_{\nu\prime\nu\vec l}\otimes\hat R_{\nu\prime\nu\vec l}$, y dado que podemos considerar que las vibraciones perpendiculares al plano están completamente desacopladas de las interplanares, simplemente añadimos la unidad a la diagonal de la matriz, siendo nulos los otros elementos añadidos.

Así que tratamos por un lado las vibraciones en el plano por y por otro las perpendiculares al plano del cristal, ya que como hemos comentado se trata de vibraciones completamente desacopladas.


Debemos determinar cuales son las posiciones de equilibrio de los átomos más cercanos a los átomos de la celda $\vec 0$: para ello genero un array con los datos que voy a necesitar ($\nu, \nu',\hat R_{\nu\prime,nu,\vec l}$, ... ordenandolos según su distancia a los 2 átomos de la celda  $l=\vec 0$ hasta los cuartos vecinos (usando para ello un DataFrame de pandas, que facilita mucho la manipulación de los datos)

\newpage

#+begin_src python :session :results latex :exports both
  def propiedades_atomos(l1, l2):
   
     return [(k, m, i, j, R_nu(m,i,j),
      (R_nu(m,i,j)-R_nu(k,0,0))/norm(R_nu(m,i,j)-R_nu(k,0,0)), norm(R_nu(m,i,j)-R_nu(k,0,0)))
      for k in [1,2] for m in [1,2] for i in range(-l1,l1+1) for j in range(-l2,l2+1)]

  columnas = [r"$\nu$",r"$\nu\prime$",r"$l_1$", r"$l_2$", r"$\vec R_{\nu,\vec l}$",
	      r"$\hat R_{\nu\prime,\nu,\vec l}$",'Distancia' ]

  def Atomos(l1, l2):
     return pd.DataFrame(propiedades_atomos(l1, l2),columns=columnas).sort_values(
      ['Distancia',r"$\nu\prime$"], ascending=[True, True])

  Atomos(2,2).head(38).to_latex(escape=False,float_format="{:0.4f}".format,index=False)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{tabular}{rrrrllr}
\toprule
 $\nu$ &  $\nu\prime$ &  $l_1$ &  $l_2$ &         $\vec R_{\nu,\vec l}$ &             $\hat R_{\nu\prime,\nu,\vec l}$ &  Distancia \\
\midrule
     1 &            1 &      0 &      0 &     [0.0, 0.5773502691896257] &                                  [nan, nan] &     0.0000 \\
     2 &            2 &      0 &      0 &    [0.5, 0.28867513459481287] &                                  [nan, nan] &     0.0000 \\
     2 &            1 &      0 &     -1 &   [0.5, -0.28867513459481287] &                                 [0.0, -1.0] &     0.5774 \\
     2 &            1 &      0 &      0 &     [0.0, 0.5773502691896257] &                  [-0.8660254037844387, 0.5] &     0.5774 \\
     2 &            1 &      1 &      0 &     [1.0, 0.5773502691896257] &                   [0.8660254037844387, 0.5] &     0.5774 \\
     1 &            2 &     -1 &      0 &   [-0.5, 0.28867513459481287] &                 [-0.8660254037844387, -0.5] &     0.5774 \\
     1 &            2 &      0 &      0 &    [0.5, 0.28867513459481287] &                  [0.8660254037844387, -0.5] &     0.5774 \\
     1 &            2 &      0 &      1 &     [0.0, 1.1547005383792515] &                                  [0.0, 1.0] &     0.5774 \\
     1 &            1 &     -1 &     -1 &  [-0.5, -0.28867513459481287] &  [-0.5000000000000001, -0.8660254037844387] &     1.0000 \\
     1 &            1 &      0 &     -1 &   [0.5, -0.28867513459481287] &   [0.5000000000000001, -0.8660254037844387] &     1.0000 \\
     1 &            1 &      0 &      1 &    [-0.5, 1.4433756729740643] &   [-0.5000000000000001, 0.8660254037844387] &     1.0000 \\
     1 &            1 &      1 &      1 &     [0.5, 1.4433756729740643] &    [0.5000000000000001, 0.8660254037844387] &     1.0000 \\
     2 &            2 &     -1 &     -1 &    [0.0, -0.5773502691896257] &  [-0.5000000000000001, -0.8660254037844387] &     1.0000 \\
     2 &            2 &      0 &     -1 &    [1.0, -0.5773502691896257] &   [0.5000000000000001, -0.8660254037844387] &     1.0000 \\
     2 &            2 &      0 &      1 &     [0.0, 1.1547005383792515] &   [-0.5000000000000001, 0.8660254037844387] &     1.0000 \\
     2 &            2 &      1 &      1 &     [1.0, 1.1547005383792515] &    [0.5000000000000001, 0.8660254037844387] &     1.0000 \\
     1 &            1 &     -1 &      0 &    [-1.0, 0.5773502691896257] &                                 [-1.0, 0.0] &     1.0000 \\
     1 &            1 &      1 &      0 &     [1.0, 0.5773502691896257] &                                  [1.0, 0.0] &     1.0000 \\
     2 &            2 &     -1 &      0 &   [-0.5, 0.28867513459481287] &                                 [-1.0, 0.0] &     1.0000 \\
     2 &            2 &      1 &      0 &    [1.5, 0.28867513459481287] &                                  [1.0, 0.0] &     1.0000 \\
     2 &            1 &     -1 &     -1 &  [-0.5, -0.28867513459481287] &                 [-0.8660254037844387, -0.5] &     1.1547 \\
     2 &            1 &      1 &     -1 &   [1.5, -0.28867513459481287] &                  [0.8660254037844387, -0.5] &     1.1547 \\
     2 &            1 &      1 &      1 &     [0.5, 1.4433756729740643] &                                  [0.0, 1.0] &     1.1547 \\
     1 &            2 &     -1 &     -1 &    [0.0, -0.5773502691896257] &                                 [0.0, -1.0] &     1.1547 \\
     1 &            2 &     -1 &      1 &    [-1.0, 1.1547005383792515] &                  [-0.8660254037844387, 0.5] &     1.1547 \\
     1 &            2 &      1 &      1 &     [1.0, 1.1547005383792515] &                   [0.8660254037844387, 0.5] &     1.1547 \\
     2 &            1 &     -1 &     -2 &    [0.0, -1.1547005383792515] &   [-0.3273268353539886, -0.944911182523068] &     1.5275 \\
     2 &            1 &      0 &     -2 &    [1.0, -1.1547005383792515] &    [0.3273268353539886, -0.944911182523068] &     1.5275 \\
     2 &            1 &      0 &      1 &    [-0.5, 1.4433756729740643] &   [-0.6546536707079772, 0.7559289460184545] &     1.5275 \\
     2 &            1 &      2 &      1 &     [1.5, 1.4433756729740643] &    [0.6546536707079772, 0.7559289460184545] &     1.5275 \\
     1 &            2 &     -2 &     -1 &   [-1.0, -0.5773502691896257] &  [-0.6546536707079772, -0.7559289460184545] &     1.5275 \\
     1 &            2 &      0 &     -1 &    [1.0, -0.5773502691896257] &   [0.6546536707079772, -0.7559289460184545] &     1.5275 \\
     1 &            2 &      0 &      2 &      [-0.5, 2.02072594216369] &   [-0.3273268353539886, 0.9449111825230679] &     1.5275 \\
     1 &            2 &      1 &      2 &       [0.5, 2.02072594216369] &    [0.3273268353539886, 0.9449111825230679] &     1.5275 \\
     2 &            1 &     -1 &      0 &    [-1.0, 0.5773502691896257] &   [-0.9819805060619656, 0.1889822365046136] &     1.5275 \\
     2 &            1 &      2 &      0 &     [2.0, 0.5773502691896257] &    [0.9819805060619656, 0.1889822365046136] &     1.5275 \\
     1 &            2 &     -2 &      0 &   [-1.5, 0.28867513459481287] &  [-0.9819805060619656, -0.1889822365046136] &     1.5275 \\
     1 &            2 &      1 &      0 &    [1.5, 0.28867513459481287] &   [0.9819805060619656, -0.1889822365046136] &     1.5275 \\
\bottomrule
\end{tabular}
#+end_export





\newpage

*** Fijemonos, por ahora, sólo en los primeros vecinos:

\color{blue}

Paso a usar sympy en vez de numpy (si eso ya cambiare la parte anterior a este apartado más adelante, las modificaciones son mínimas) para intentar determinar la matrix dinámica (y resolver la ecuación secular) simbólicamente
\normalcolor

#+begin_src python :session :results latex :exports both
   from sympy import *
   a=Symbol('a', real=True, positive=True)
   q_x=Symbol('q_x', real=True);  q_y=Symbol('q_y', real=True)
   q=Matrix([q_x,q_y])
   a_1=Matrix([a,0]); a_2=Matrix([-a/2,sqrt(3)*a/2])
   R_B=1/3*a_1+2/3*a_2; R_N=2/3*a_1+1/3*a_2

   def R_l(l_1,l_2):
     return l_1*a_1+l_2*a_2

   def R_nu_l(nu,l_1,l_2):
     if nu == 1:
       return l_1*a_1+l_2*a_2+R_B

     elif nu == 2:
       return l_1*a_1+l_2*a_2+R_N

     else:
       print("Error, nu solo puede ser 1 o 2 ")

   def R_hat(nuprima,nu,l_1,l_2):
     return (R_nu_l(nu,l_1,l_2)-R_nu_l(nuprima,0,0))/(R_nu_l(nu,l_1,l_2)-R_nu_l(nuprima,0,0)).norm()

   def propiedades_atomos(l_1, l_2):
     return [(k, m, i, j, R_hat(k,m,i,j), (R_nu_l(m,i,j)-R_nu_l(k,0,0)).norm())
	for k in [1,2] for m in [1,2] for i in range(-l_1,l_1+1) for j in range(-l_2,l_2+1)]

   columnas = [r"$\nu\prime$",r"$\nu",r"$l_1$", r"$l_2$",r"$\hat R_{\nu\prime,\nu,\vec l}$"
	       ,'Distancia']

   def Atomos(l_1, l_2):
     return pd.DataFrame(propiedades_atomos(l_1, l_2),columns=columnas).sort_values(
       ['Distancia',r"$\nu\prime$"], ascending=[True, True])

   PrimerosVecinosBoro= Atomos(1,1)[(Atomos(1,1)['Distancia']/a<0.9) &
			     (Atomos(1,1)['Distancia']/a>0) & (Atomos(1,1)[r"$\nu\prime$"]==1)]

   PrimerosVecinosNitrogeno= Atomos(1,1)[(Atomos(1,1)['Distancia']/a<0.9) &
			     (Atomos(1,1)['Distancia']/a>0) & (Atomos(1,1)[r"$\nu\prime$"]==2)]

#+end_src   

#+RESULTS:
#+begin_export latex
#+end_export

\newpage
#+begin_src python :session :results latex :exports both
  PrimerosVecinosBoro.to_latex(escape=False,index=False)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{tabular}{rrrrll}
\toprule
 $\nu\prime$ &  $\nu &  $l_1$ &  $l_2$ &                   $\hat R_{\nu\prime,\nu,\vec l}$ &            Distancia \\
\midrule
           1 &     2 &     -1 &      0 &  [-0.866025403784439, -0.288675134594813*sqrt(3)] &  0.577350269189626*a \\
           1 &     2 &      0 &      0 &   [0.866025403784439, -0.288675134594813*sqrt(3)] &  0.577350269189626*a \\
           1 &     2 &      0 &      1 &                    [0, 0.577350269189626*sqrt(3)] &  0.577350269189626*a \\
\bottomrule
\end{tabular}
#+end_export


#+begin_src python :session :results none :exports both
  alpha=Symbol('alpha')
  A1x, A1y, A1z, A2x, A2y, A2z = symbols("A1x, A1y, A1z, A2x, A2y, A2z")
  M1=(R_hat(1,2,-1,0)*R_hat(1,2,-1,0).T*Matrix([A2x*exp(-I*q.dot(a_1))-A1x,
      A2y*exp(-I*q.dot(a_1))-A1y])+
      (R_hat(1,2,0,0)*R_hat(1,2,0,0).T*Matrix([A2x-A1x, A2y-A1y]))+
	(R_hat(1,2,0,1)*R_hat(1,2,0,1).T*Matrix([A2x*exp(I*q.dot(a_2))-A1x,
	  A2y*exp(I*q.dot(a_2))-A1y])))
#+end_src



#+begin_src python :session :results latex :exports both
  PrimerosVecinosNitrogeno.to_latex(escape=False,index=False)
#+end_src

#+RESULTS:
#+begin_export latex
\begin{tabular}{rrrrll}
\toprule
 $\nu\prime$ &  $\nu &  $l_1$ &  $l_2$ &                  $\hat R_{\nu\prime,\nu,\vec l}$ &            Distancia \\
\midrule
           2 &     1 &      0 &      0 &  [-0.866025403784439, 0.288675134594813*sqrt(3)] &  0.577350269189626*a \\
           2 &     1 &      1 &      0 &   [0.866025403784439, 0.288675134594813*sqrt(3)] &  0.577350269189626*a \\
           2 &     1 &      0 &     -1 &                  [0, -0.577350269189626*sqrt(3)] &  0.577350269189626*a \\
\bottomrule
\end{tabular}
#+end_export


#+begin_src python :session :results none :exports both
  M2=(R_hat(2,1,0,-1)*R_hat(2,1,0,-1).T*Matrix([A2x*exp(-I*q.dot(a_2))-A1x,
	A2y*exp(-I*q.dot(a_2))-A1y])+(R_hat(2,1,0,0)*R_hat(2,1,0,0).T*
	 Matrix([A2x-A1x, A2y-A1y]))+  (R_hat(2,1,1,0)*R_hat(2,1,1,0).T*
	  Matrix([A2x*exp(I*q.dot(a_1))-A1x, A2y-A1y])))
#+end_src



#+begin_src python :session :results none :exports both
  M=M1.row_insert(2,M2)
  print_latex(M) #.rewrite(cos).trigsimp()
#+end_src

#+RESULTS:
\begin{scriptsize}
\begin{equation}
\left[\begin{matrix}- 1.5 A1x + 0.75 A2x + 0.75 A2x e^{- i a q_{x}} - 0.25 \sqrt{3} \left(- A1y + A2y\right) + 0.25 \sqrt{3} \left(- A1y + A2y e^{- i a q_{x}}\right)\\- 1.5 A1y + 1.0 A2y e^{i \left(- \frac{a q_{x}}{2} + \frac{\sqrt{3} a q_{y}}{2}\right)} + 0.25 A2y + 0.25 A2y e^{- i a q_{x}} - 0.25 \sqrt{3} \left(- A1x + A2x\right) + 0.25 \sqrt{3} \left(- A1x + A2x e^{- i a q_{x}}\right)\\- 1.5 A1x + 0.75 A2x e^{i a q_{x}} + 0.75 A2x\\- 1.5 A1y + 0.5 A2y + 1.0 A2y e^{- i \left(- \frac{a q_{x}}{2} + \frac{\sqrt{3} a q_{y}}{2}\right)} - 0.25 \sqrt{3} \left(- A1x + A2x\right) + 0.25 \sqrt{3} \left(- A1x + A2x e^{i a q_{x}}\right)\end{matrix}\right]
\end{equation}
\end{scriptsize}

\vspace{0.5cm}

Por otra parte, tenemos que considerar las vibraciones perpendiculares al plano del cristal, notemos que en este caso tenemos que resolver dos ecuaciones escalares del tipo:

\begin{equation}
-m_\nu\omega^2 A_\nu=\alpha\sum_{\nu\prime,\vec l}\left(A_{\nu\prime}e^{i\vec q\cdot \vec R_{\vec l}}-A_{\nu}\right)
\end{equation}

- Para $\nu\prime=1$
#+begin_src python :session :results none :exports both
  M_1_z=Matrix([A2z*exp(-I*q.dot(a_1))-A1z+ A2z-A1z+A2z*exp(I*q.dot(a_2))-A1z])
#+end_src

  

- Para $\nu\prime=2$
#+begin_src python :session :results none :exports both
  M_2_z=Matrix([A1z-A2z+ A1z*exp(I*q.dot(a_1))-A2z+A1z*exp(-I*q.dot(a_2))-A2z])
#+end_src

#+begin_src python :session :results none :exports both
  Mprova1=M.row_insert(2,M_1_z)
  Mprova2=Mprova1.row_insert(5,M_1_z)
  print_latex(Mprova2.expand()) #.rewrite(cos).trigsimp()
#+end_src




\begin{equation}
\left[\begin{matrix}- 1.5 A1x + 0.75 A2x + 0.75 A2x e^{- i a q_{x}} - 0.25 \sqrt{3} A2y + 0.25 \sqrt{3} A2y e^{- i a q_{x}}\\- 1.5 A1y - 0.25 \sqrt{3} A2x + 0.25 \sqrt{3} A2x e^{- i a q_{x}} + 0.25 A2y + 0.25 A2y e^{- i a q_{x}} + 1.0 A2y e^{- \frac{i a q_{x}}{2}} e^{\frac{\sqrt{3} i a q_{y}}{2}}\\- 3 A1z + A2z + A2z e^{- i a q_{x}} + A2z e^{- \frac{i a q_{x}}{2}} e^{\frac{\sqrt{3} i a q_{y}}{2}}\\- 1.5 A1x + 0.75 A2x e^{i a q_{x}} + 0.75 A2x\\- 1.5 A1y + 0.25 \sqrt{3} A2x e^{i a q_{x}} - 0.25 \sqrt{3} A2x + 1.0 A2y e^{\frac{i a q_{x}}{2}} e^{- \frac{\sqrt{3} i a q_{y}}{2}} + 0.5 A2y\\- 3 A1z + A2z + A2z e^{- i a q_{x}} + A2z e^{- \frac{i a q_{x}}{2}} e^{\frac{\sqrt{3} i a q_{y}}{2}}\end{matrix}\right]
\end{equation}



A falta de multiplicar cada fila por la correspondiente $m_{\nu}$ (3 de arriba por $m_1$ y  3 de abajo por $m_2$) y constante de fuerza $\alpha$ esta vector (es el resultado de multiplicar la denominada matriz dinámica por el vector polarzación $\vec A$, de 6 componentes

#+begin_src python :session :results none :exports both
  A=Matrix([A1x,A1y,A1z,A2x,A2y,A2z]); B=Matrix([1/A1x,1/A1y,1/A1z,1/A2x,1/A2y,1/A2z])
  print_latex(B)
#+end_src

\begin{equation}
\vec A=\left[\begin{matrix}A1x\\A1y\\A1z\\A2x\\A2y\\A2z\end{matrix}\right]
\end{equation}


- Pasamos ya a calcular la matriz dinámica considerndo sólo los primeros vecinos ...
#+begin_src python :session :results output :exports both
  print(Mprova2[2].coeff(A2z))
#+end_src
  
#+RESULTS:
: exp(I*(-a*q_x/2 + sqrt(3)*a*q_y/2)) + 1 + exp(-I*a*q_x)


  

*** Con numpy :noexport:   
#+begin_src python :session :results latex :exports none
  PrimerosVecinosBoro=  Atomos(1,1)[(Atomos(1,1)['Distancia']<0.9) &
			    (Atomos(1,1)['Distancia']>0) & (Atomos(1,1)[r"$\nu\prime$"]==1)]

  PrimerosVecinosBoro.to_latex(escape=False,index=False)
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export


- Podemos observar que para $\nu\prime=1$, el átomo de Boro, de la celdilla $\vec l=\vec 0$, tenemos $3$ $p.v$, $3$ átomos de $N$, uno que pertenece a la misma celda $\vec l=\vec 0$ y otros dos de celdillas contiguas. \color{red}Considerando que $\alpha_{1,2,(1,0)}=\alpha_{1,2,(0,-1)}$ por simetria, ya que se estamos hablando de la interacción entre dos átomos de $B$ y $N$ de celdas contiguas, y diferente a $\alpha_{1,2,(0,0)}$, pues en este caso los aomos $B$ y $N$ pertenecen a la misma base (mirar enlaces de BN, hibridaciones, etc.) \normalcolor


\begin{equation}
\begin{aligned}
-m_1\omega^2
\begin{pmatrix}
{A_1}_x\\
{A_1}_y
\end{pmatrix}& =\alpha_{1,2,(0,0)}\left(\hat R_{1,2,(0,0)}\otimes\hat R_{1,2,(0,0)}\right)\cdot
\left(\begin{pmatrix}
{A_2}_x\\
{A_2}_y
\end{pmatrix}-\begin{pmatrix}
{A_1}_x\\
{A_1}_y\end{pmatrix}\right)+\\
 &+\alpha_{1,2(1,0)}\left(\hat R_{1,2,(1,0)}\otimes\hat R_{1,2,(1,0)}\right)\cdot
\left(\begin{pmatrix}
{A_2}_x\\
{A_2}_y\\
\end{pmatrix}\cdot e^{i \vec q\cdot \vec a_1}-\begin{pmatrix}
{A_1}_x\\
{A_1}_y\end{pmatrix}\right)\right)\\
 &+\alpha_{1,2(0,-1)}\left(\hat R_{1,2,(0,-1)}\otimes\hat R_{1,2,(0,-1)}\right)\cdot
\left(\begin{pmatrix}
{A_2}_x\\
{A_2}_y
\end{pmatrix}\cdot e^{-i \vec q\cdot \vec a_2 }-\begin{pmatrix}
{A_1}_x\\
{A_1}_y\end{pmatrix}\right)
\end{aligned}
\end{equation}

- Igualmente, para $\nu\prime=2$, el átomo de $N$ de la celdilla $\vec l=\vec 0$ tenemos $3$ átomos de $B$ como primeros vecinos

\begin{equation}
\begin{aligned}
-m_2\omega^2
\begin{pmatrix}
{A_2}_x\\
{A_2}_y
\end{pmatrix}& =\alpha_{2,1,(0,0)}\left(\hat R_{2,1,(0,0)}\otimes\hat R_{2,1,(0,0)}\right)\cdot
\left(\begin{pmatrix}
{A_1}_x\\
{A_1}_y
\end{pmatrix}-\begin{pmatrix}
{A_2}_x\\
{A_2}_y\end{pmatrix}\right)+\\
 &+\alpha_{2,1,(-1,0)}\left(\hat R_{2,1,(-1,0)}\otimes\hat R_{2,1,(-1,0)}\right)\cdot
\left(\begin{pmatrix}
{A_1}_x\\
{A_1}_y\\
\end{pmatrix}\cdot e^{-i \vec q\cdot \vec a_1}-\begin{pmatrix}
{A_1}_x\\
{A_1}_y\end{pmatrix}\right)\right)\\
 &+\alpha_{2,1,(0,1)}\left(\hat R_{2,1,(0,1)}\otimes\hat R_{2,1,(0,1)}\right)\cdot
\left(\begin{pmatrix}
{A_1}_x\\
{A_1_y
\end{pmatrix}\cdot e^{i \vec q\cdot \vec a_2}-\begin{pmatrix}
{A_2}_x\\
{A_2}_y\end{pmatrix}\right)
\end{aligned}
\end{equation}





** Matriz dinámica                                                 :noexport:
   

Las frecuencias $\omega$ de los fonones en función del vector de ondas $\vec q$ son soluciones de la ecuación secular:

\begin{equation}
\det\left|\frac{1}{\sqrt{M_sM_t}}C^{\alpha\beta}_{st}\left(\vec q\right)-\omega^2\left(\vec q\right)\right| 
\end{equation}

donde $M_s$ y $M_t$ denotan las masas atómicas de los átoos $s$ y $t$ y la matriz dinámica esta definida cómo:

\begin{equation}
C^{\alpha\beta}_{st}\left(\vec q\right)=\frac{\partial^2E}{\partial u^{*\alpha}_s\left(\vec q\right)\partial u^{\beta}_{t}\left(\vec q\right)}
\end{equation}

donde $u^{*\alpha}_{s} representa el desplazamiento del átomo $s$ en la dirección $\alpha$ y la segunda derivada de la energía corresponde al cambio de la fuerza que actua en el átomo $t$ en la dirección $\beta$ respecto al desplazamiento del átomo $s$ en la dirección $\alpha$
